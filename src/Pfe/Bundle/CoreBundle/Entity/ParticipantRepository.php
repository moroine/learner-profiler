<?php

namespace Pfe\Bundle\CoreBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;

/**
 * ParticipantRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ParticipantRepository extends EntityRepository
{

    private $labels;

    public function getTraceData($trace)
    {
        $qb = $this->createQueryBuilder('p');

        $this->setSelect($qb, $trace->operation);

        $this->setJoins($qb, $trace->group, $trace->filters);

        $this->setWhere($qb, $trace->filters);

        $this->setGroup($qb, $trace->group);

        return $qb->getQuery()->getResult();
    }

    private function getFieldIdentifier($type, $field = null)
    {
        if ($field) {
            return substr($type, 0, 1) . "." . $field;
        }

        return substr($type, 0, 1);
    }

    private function setSelect(QueryBuilder $qb, $operation)
    {
        switch ($operation) {
            case 'count':
                $qb->select("COUNT(p) as entry");
                break;
        }
    }

    private function setJoins(QueryBuilder $qb, $group, $filters)
    {
        $entities = array();
        $entities[] = $group->type;

        foreach ($filters as $filter) {
            if (!in_array($filter->type, $entities)) {
                $entities[] = $filter->type;
            }
        }

        foreach ($entities as $entity) {
            switch ($entity) {
                case 'localisation':
                    $qb->leftJoin($this->getFieldIdentifier('participant', 'home'), $this->getFieldIdentifier('localisation'));
                    break;
                case 'action':
                    $qb->leftJoin('PfeCoreBundle:Action', $this->getFieldIdentifier('action'), 'WITH', $this->getFieldIdentifier('action', 'participant') . ' = ' . $this->getFieldIdentifier('participant', 'id'));
                    break;
            }
        }
    }

    private function setWhere(QueryBuilder $qb, $filters)
    {
        foreach ($filters as $filter) {
            $qb->andWhere($this->getExpression($filter));
        }
    }

    private function setGroup(QueryBuilder $qb, $group)
    {
        $identifier = $this->getFieldIdentifier($group->type, $group->field);
        $qb->groupBy($identifier);
        $qb->addSelect($identifier);
        $qb->addOrderBy($identifier);

        // Special case for city
        if ($identifier === $this->getFieldIdentifier('localisation', 'city')) {
            $qb->addGroupBy($this->getFieldIdentifier('localisation', 'isoAlpha3'));
            $qb->addSelect($this->getFieldIdentifier('localisation', 'latitude'));
            $qb->addSelect($this->getFieldIdentifier('localisation', 'longitude'));
        }
    }

    private function getExpression($filter)
    {
        if (!($filter->type === "participant" && $filter->field === 'role')) {
            $identifier = $this->getFieldIdentifier($filter->type, $filter->field);

            if ($filter->value === NULL) {
                $rule = ($filter->rule !== 'is') ? ' IS NOT ' : ' IS ';
                return $identifier . $rule . 'NULL';
            }

            $value = "'" . strtolower($filter->value) . "'";

            switch ($filter->rule) {
                case 'is':
                    $rule = ' = ';
                    break;
                case 'not':
                    $rule = ' <> ';
                    break;
                case 'lower':
                    $rule = ' < ';
                    break;
                case 'higher':
                    $rule = ' > ';
                    break;
            }

            return $identifier . $rule . $value;
        }

        $identifier = $this->getFieldIdentifier($filter->type);

        // Special case inheritance Participant
        switch (strtolower($filter->value)) {
            case 'apprenant':
                $value = 'PfeCoreBundle:Apprenant';
                break;
            case 'staff':
                $value = 'PfeCoreBundle:Staff';
                break;
            case 'etudiant':
                $value = 'PfeCoreBundle:Etudiant';
                break;
        }
        switch ($filter->rule) {
            case 'is':
                $rule = ' INSTANCE OF ';
                break;
            case 'not':
                $rule = ' NOT INSTANCE OF ';
                break;
            default:
                $rule = ' INSTANCE OF ';
        }

        return $identifier . $rule . $value;
    }

    /*     * ***************************** FOLLOW DUST *************************************** */

    public function findAllLocalisations()
    {
        $dql = 'SELECT DISTINCT p.state, p.city, COUNT(p) as n FROM PfeCoreBundle:Participant as p GROUP BY p.state, p.city ORDER BY n, p.state, p.city';

        return $this->getEntityManager()->createQuery($dql)->getResult();
    }

    public function findAllStates()
    {
        $dql = 'SELECT DISTINCT p.state, COUNT(p) as n FROM PfeCoreBundle:Participant as p GROUP BY p.state ORDER BY n, p.state';

        return $this->getEntityManager()->createQuery($dql)->getResult();
    }

    public function count()
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $query = $qb
                ->select('COUNT(p) as n, l.isoAlpha3')
                ->from('PfeCoreBundle:Participant', 'p')
                ->leftJoin('p.home', 'l')
                ->groupBy('l.isoAlpha3')
                ->getQuery();

        return $query->getResult();
    }

    public function findByCustomQuery($operation, $group, $filters)
    {
        $this->labels = array();

        $qb = $this->getEntityManager()->createQueryBuilder();

        $qb->from('PfeCoreBundle:Participant', 'p');
        $this->labels['Participant'] = "p";

        switch ($operation) {
            case 'count':
                $qb->select('COUNT(p) as entry');
                break;
            default:
                $qb->select('p as entry');
                break;
        }

        switch ($group) {
            case 'Localisation.state':
                if (empty($this->labels['Localisation'])) {
                    $qb->leftJoin('p.home', 'l');
                    $this->labels['Localisation'] = 'l';
                }
                $qb->addSelect('l.isoAlpha3');
                $qb->addSelect('l.state');
                $qb->groupBy('l.isoAlpha3');
                break;
            case 'Localisation.city':
                if (empty($this->labels['Localisation'])) {
                    $qb->leftJoin('p.home', 'l');
                    $this->labels['Localisation'] = 'l';
                }
                $qb->addSelect('l.isoAlpha3, l.city, l.latitude, l.longitude');
                $qb->groupBy('l.isoAlpha3');
                $qb->AddGroupBy('l.city');
                break;
        }

        $this->applyFilters($qb, $filters);
        $query = $qb->getQuery();

        return $query->getArrayResult();
    }

    private function applyFilters(\Doctrine\ORM\QueryBuilder $qb, $filters)
    {
        $allowedRules = array("is", "not", "lower", "higher");
        $allowedTypes = array("Localisation", "Participant", "Action");

        foreach ($filters as $key => $filter) {
            $rule = $filter["rule"];
            if (!in_array($rule, $allowedRules)) {
                continue;
            }
            $type = $filter["type"];
            if (!in_array($type, $allowedTypes)) {
                continue;
            }
            switch ($type) {
                case 'Localisation':
                    $this->applyLocalisationFilter($qb, $rule, $filter["field"], $filter["value"]);
                    break;
            }
        }
    }

    private function applyLocalisationFilter(\Doctrine\ORM\QueryBuilder $qb, $rule, $field, $value)
    {
        switch ($rule) {
            case 'is':
                $operator = "LIKE";
                break;
            case 'not':
                $operator = "NOT LIKE";
                break;
            default:
                return;
        }

        if (empty($this->labels['Localisation'])) {
            $qb->leftJoin('p.home', 'l');
            $this->labels['Localisation'] = 'l';
        }

        if ($field === "city") {
            $key = uniqid("city");
            $qb->andWhere($this->getRuleExpression("LOWER(l.city)", $operator, " LOWER(:" . $key . ')'));
            $qb->setParameter($key, $value);
        }
        if ($field === "isoAlpha3") {
            $key = uniqid("isoAlpha3");
            $qb->andWhere($this->getRuleExpression("LOWER(l.isoAlpha3)", $operator, " LOWER(:" . $key . ')'));
            $qb->setParameter($key, $value);
        }
    }

    private function getRuleExpression($left, $rule, $right)
    {
        switch ($rule) {
            case 'is':
                $operator = "=";
                break;
            case 'not':
                $operator = "<>";
                break;
            case 'lower':
                $operator = "<";
                break;
            case 'higher':
                $operator = ">";
                break;
            default:
                return "1 = 1";
        }

        return $left . " " . $operator . " " . $right;
    }

}
