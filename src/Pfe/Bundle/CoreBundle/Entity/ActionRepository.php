<?php

namespace Pfe\Bundle\CoreBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;

/**
 * ActionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ActionRepository extends EntityRepository
{

    public function getTraceData($trace)
    {
        $qb = $this->createQueryBuilder('a');

        $this->setSelect($qb, $trace->operation);

        $this->setJoins($qb, $trace->group, $trace->filters);

        $this->setWhere($qb, $trace->filters);

        $this->setGroup($qb, $trace->group);

        return $qb->getQuery()->getResult();
    }

    private function getFieldIdentifier($type, $field = null)
    {
        if ($field) {
            return substr($type, 0, 1) . "." . $field;
        }

        return substr($type, 0, 1);
    }

    private function setSelect(QueryBuilder $qb, $operation)
    {
        switch ($operation) {
            case 'count':
                $qb->select("COUNT(a) as entry");
                break;
        }
    }

    private function setJoins(QueryBuilder $qb, $group, $filters)
    {
        $entities = array();
        $entities[] = $group->type;

        foreach ($filters as $filter) {
            if (!in_array($filter->type, $entities)) {
                $entities[] = $filter->type;
            }
        }

        foreach ($entities as $entity) {
            switch ($entity) {
                case 'localisation':
                    $qb->leftJoin($this->getFieldIdentifier('action', 'localisation'), $this->getFieldIdentifier('localisation'));
                    break;
                case 'participant':
                    $qb->leftJoin($this->getFieldIdentifier('action', 'participant'), $this->getFieldIdentifier('participant'));
                    break;
                case 'module':
                    $qb->leftJoin($this->getFieldIdentifier('action', 'module'), $this->getFieldIdentifier('module'));
                    break;
            }
        }
    }

    private function setWhere(QueryBuilder $qb, $filters)
    {
        foreach ($filters as $filter) {
            $qb->andWhere($this->getExpression($filter));
        }
    }

    private function setGroup(QueryBuilder $qb, $group)
    {
        $identifier = $this->getFieldIdentifier($group->type, $group->field);
        $qb->groupBy($identifier);
        $qb->addSelect($identifier);
        $qb->addOrderBy($identifier);
    }

    private function getExpression($filter)
    {
        $identifier = $this->getFieldIdentifier($filter->type, $filter->field);

        if ($filter->value === NULL) {
            $rule = ($filter->rule !== 'is') ? ' IS NOT ' : ' IS ';
            return $identifier . $rule . 'NULL';
        }

        $value = "'" . strtolower($filter->value) . "'";

        switch ($filter->rule) {
            case 'is':
                $rule = ' = ';
                break;
            case 'not':
                $rule = ' <> ';
                break;
            case 'lower':
                $rule = ' < ';
                break;
            case 'higher':
                $rule = ' > ';
                break;
        }

        return $identifier . $rule . $value;
    }

}
